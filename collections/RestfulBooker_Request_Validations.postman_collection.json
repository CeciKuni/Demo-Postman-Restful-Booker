{
	"info": {
		"_postman_id": "1bda6433-d251-454d-b222-9e743c99f6eb",
		"name": "RestfulBooker_Request_Validations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5187331"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Valid Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Set credentials\r",
									"pm.collectionVariables.set(\"username\", \"admin\");\r",
									"pm.collectionVariables.set(\"password\", \"password123\");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate username\r",
									"pm.test(\"Variable {{username}} matches the value of the collection\", function() {\r",
									"    const expectedUsername = pm.collectionVariables.get(\"username\");\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const actualUsername = requestBody.username;\r",
									"    pm.expect(actualUsername).to.eql(expectedUsername);\r",
									"});\r",
									"\r",
									"\r",
									"// Validate password\r",
									"pm.test(\"Variable {{password}} matches the value of the collection\", function() {\r",
									"    const expectedPassword = pm.collectionVariables.get(\"password\");\r",
									"    const requestBody = JSON.parse(pm.request.body.raw);\r",
									"    const actualPassword = requestBody.password;\r",
									"    pm.expect(actualPassword).to.eql(expectedPassword);\r",
									"});\r",
									"\r",
									"// Validate header \"Content-Type\" equals \"application/json\"\r",
									"pm.test(\"Header 'Content-Type' is 'application/json'\", function() {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"// Validate body response is JSON format\r",
									"pm.test(\"The body response is a valid JSON\", function() {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"// Validate body has a token value string\r",
									"pm.test(\"The body response contains a 'token' string\", function() {\r",
									"    const responseBody = pm.response.json();\r",
									"\r",
									"    pm.expect(responseBody).to.have.property(\"token\");\r",
									"    pm.expect(responseBody.token).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"//Save the token in the collection variables\r",
									"var response = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"token\", response.token);\r",
									"\r",
									"console.log(response);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Define a list of usernames and passwords\r",
									"var users = [\r",
									"    { \"username\": \"user1\", \"password\": \"password1\" },\r",
									"    // Add more usernames and passwords as needed\r",
									"];\r",
									"\r",
									"// Perform tests for each username and password in the list\r",
									"for (var i = 0; i < users.length; i++) {\r",
									"    var user = users[i];\r",
									"\r",
									"    // Set collection variables with the current username and password values\r",
									"    pm.variables.set(\"invalid_username\", user.username);\r",
									"    pm.variables.set(\"invalid_password\", user.password);\r",
									"\r",
									"    // Make the POST request\r",
									"    var response = pm.sendRequest({\r",
									"        url: pm.variables.get(\"base_url\") + \"/auth\",\r",
									"        method: 'POST',\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({ \"username\": pm.variables.get(\"invalid_username\"), \"password\": pm.variables.get(\"invalid_password\") })\r",
									"        }\r",
									"    });\r",
									"\r",
									"    // Perform validations for the current response\r",
									"    pm.test(`Test for username: ${user.username} - password: ${user.password}`, function () {\r",
									"        // Verify the response status is 200 (success)\r",
									"        pm.response.to.have.status(200);\r",
									"\r",
									"        // Verify the reason is \"Bad credentials\"\r",
									"        pm.expect(pm.response.json().reason).to.eql(\"Bad credentials\");\r",
									"    });\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{invalid_username}}\",\r\n    \"password\": \"{{invalid_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Create Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Save data as variables\r",
									"pm.test(\"Save data as variables\", function() {\r",
									"    const responseBody = pm.response.json();\r",
									"    \r",
									"    pm.variables.set(\"bookingId\", responseBody.bookingid);\r",
									"    pm.variables.set(\"firstName\", responseBody.booking.firstname);\r",
									"    pm.variables.set(\"lastName\", responseBody.booking.lastname);\r",
									"});\r",
									"\r",
									"\r",
									"// Validate header \"Content-Type\" equals \"application/json\"\r",
									"pm.test(\"Header 'Content-Type' is 'application/json'\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"// Validate body response is JSON format\r",
									"pm.test(\"The body response is a valid JSON\", function() {\r",
									"    pm.response.to.have.jsonBody();\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Validate numbers\r",
									"pm.test(\"The body response contains a 'bookingid' and 'totalprice' numbers\", function() {\r",
									"    pm.expect(jsonData.bookingid).to.not.be.null;\r",
									"    pm.expect(jsonData.bookingid).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.booking.totalprice).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"// Validate body has a booking and bookingdates object\r",
									"pm.test(\"The body response contains a 'booking' and 'bookingdates' objects\", function() {\r",
									"    pm.expect(jsonData.booking).to.be.a(\"object\");\r",
									"    pm.expect(jsonData.booking.bookingdates).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"// Validate strings\r",
									"pm.test(\"The values 'firstname', 'lastname' and 'additionalneeds' are strings\", function() {\r",
									"    pm.expect(jsonData.booking.firstname).to.not.be.null;\r",
									"    pm.expect(jsonData.booking.firstname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.booking.lastname).to.not.be.null;\r",
									"    pm.expect(jsonData.booking.lastname).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.booking.additionalneeds).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"// Validate dates\r",
									"pm.test(\"The values 'checkin' and 'checkout' are dates\", function() {\r",
									"\r",
									"    const checkinDate = new Date(jsonData.booking.bookingdates.checkin);\r",
									"    const checkoutDate = new Date(jsonData.booking.bookingdates.checkout);\r",
									"    \r",
									"    pm.expect(checkinDate).to.not.be.null;\r",
									"    pm.expect(checkoutDate).to.not.be.null;\r",
									"    pm.expect(checkinDate.toString()).to.not.equal(\"Invalid Date\");\r",
									"    pm.expect(checkoutDate.toString()).to.not.equal(\"Invalid Date\");\r",
									"});\r",
									"\r",
									"// Validate boolean\r",
									"pm.test(\"The value 'depositpaid' is a boolean\", function() {\r",
									"\r",
									"    pm.expect(jsonData.booking.depositpaid).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"// Call GET request and validate if the bookingid exists\r",
									"pm.sendRequest({\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/booking/{{bookingId}}\"),\r",
									"    method: 'GET'\r",
									"}, function (err, response) {\r",
									"    pm.test(\"Executing GET request\", function () {});\r",
									"});\r",
									"\r",
									"// Call DELETE and delete the bookingid\r",
									"const deleteBooking ={\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/booking/{{bookingId}}\"),\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type':'application/json',\r",
									"        'Cookie':`token=${pm.variables.get(\"token\")}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteBooking, function (err, res) {\r",
									"    pm.test(\"Deleted\", function () {});\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\",\r\n    \"totalprice\": {{$randomPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{$randomDatePast}}\",\r\n        \"checkout\": \"{{$randomDateFuture}}\"\r\n    },\r\n    \"additionalneeds\": \"{{$randomLoremWords}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": [
						{
							"name": "Numbers instead of Strings",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\",\r\n    \"totalprice\": {{$randomPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{$randomDatePast}}\",\r\n        \"checkout\": \"{{$randomDateFuture}}\"\r\n    },\r\n    \"additionalneeds\": \"{{$randomLoremWords}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/booking",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Invalid format firstname and lastname",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstname\": \"<script>alert(\\\"gotcha!\\\")</script>\",\r\n    \"lastname\": \"*!@#$%^ & \",\r\n    \"totalprice\": {{$randomPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{$randomDatePast}}\",\r\n        \"checkout\": \"{{$randomDateFuture}}\"\r\n    },\r\n    \"additionalneeds\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/booking",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"booking"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Partial Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Call GET request and validate if the bookingid exists\r",
									"pm.sendRequest({\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/booking/{{bookingId}}\"),\r",
									"    method: 'GET'\r",
									"}, function (err, response) {\r",
									"    pm.test(\"Executing GET request\", function () {});\r",
									"});\r",
									"\r",
									"// Call DELETE and delete the bookingid\r",
									"const deleteBooking ={\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/booking/{{bookingId}}\"),\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type':'application/json',\r",
									"        'Cookie':`token=${pm.variables.get(\"token\")}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteBooking, function (err, res) {\r",
									"    pm.test(\"Deleted\", function () {});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Call Auth\r",
									"const auth ={\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/auth\"),\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"admin\",\r",
									"            \"password\": \"password123\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(auth, function (err, res) {\r",
									"    pm.test(\"Valid Authorization\", function () {\r",
									"        pm.variables.set(\"token\", res.json().token);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Create a booking\r",
									"const baseURL = pm.environment.get(\"base_url\");\r",
									"const requestURL = baseURL + \"/booking\";\r",
									"\r",
									"const createBooking = {\r",
									"    url: requestURL,\r",
									"    method: 'POST',\r",
									"    header: 'Content-Type:application/json',\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"firstname\": \"Armando\",\r",
									"            \"lastname\": \"Barreda\",\r",
									"            \"totalprice\": 5986,\r",
									"            \"depositpaid\": true,\r",
									"            \"bookingdates\": {\r",
									"                \"checkin\": \"2023-12-09\",\r",
									"                \"checkout\": \"2024-01-12\"\r",
									"            },\r",
									"            \"additionalneeds\": \"Something sweet\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.variables.set(\"bookingId\", res.json().bookingid);\r",
									"    console.log(err ? err : res.json());\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"totalprice\": {{$randomPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2022-12-03\",\r\n        \"checkout\": \"2024-01-016\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Call GET request and validate if the bookingid exists\r",
									"pm.sendRequest({\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/booking/{{bookingId}}\"),\r",
									"    method: 'GET'\r",
									"}, function (err, response) {\r",
									"    pm.test(\"Executing GET request\", function () {});\r",
									"});\r",
									"\r",
									"// Call DELETE and delete the bookingid\r",
									"const deleteBooking ={\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/booking/{{bookingId}}\"),\r",
									"    method: 'DELETE',\r",
									"    header: {\r",
									"        'Content-Type':'application/json',\r",
									"        'Cookie':`token=${pm.variables.get(\"token\")}`\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(deleteBooking, function (err, res) {\r",
									"    pm.test(\"Deleted\", function () {});\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Call Auth\r",
									"const auth ={\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/auth\"),\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"admin\",\r",
									"            \"password\": \"password123\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(auth, function (err, res) {\r",
									"    pm.test(\"Valid Authorization\", function () {\r",
									"        pm.variables.set(\"token\", res.json().token);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// Create a booking\r",
									"const baseURL = pm.environment.get(\"base_url\");\r",
									"const requestURL = baseURL + \"/booking\";\r",
									"\r",
									"const createBooking = {\r",
									"    url: requestURL,\r",
									"    method: 'POST',\r",
									"    header: 'Content-Type:application/json',\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"firstname\": \"Edna\",\r",
									"            \"lastname\": \"Krabappel\",\r",
									"            \"totalprice\": 560,\r",
									"            \"depositpaid\": true,\r",
									"            \"bookingdates\": {\r",
									"                \"checkin\": \"2023-12-15\",\r",
									"                \"checkout\": \"2024-01-12\"\r",
									"            },\r",
									"            \"additionalneeds\": \"---\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.variables.set(\"bookingId\", res.json().bookingid);\r",
									"    console.log(err ? err : res.json());\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\",\r\n    \"totalprice\": {{$randomPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{$randomDatePast}}\",\r\n        \"checkout\": \"{{$randomDateFuture}}\"\r\n    }\r\n  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Booking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The booking was deleted\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"//Call GET request to validate if the booking was deleted\r",
									"pm.sendRequest({\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/booking/{{bookingId}}\"),\r",
									"    method: \"GET\"\r",
									"    }, function (err, res) {\r",
									"        console.log(err ? err : res);\r",
									"\r",
									"        pm.test(\"The booking does not exist\", function() {\r",
									"            pm.expect(res.code).to.equal(404);\r",
									"        });\r",
									"    });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Call Auth\r",
									"const auth ={\r",
									"    url: pm.variables.replaceIn(\"{{base_url}}/auth\"),\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type':'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"username\": \"admin\",\r",
									"            \"password\": \"password123\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(auth, function (err, res) {\r",
									"    pm.test(\"Valid Authorization\", function () {\r",
									"        pm.variables.set(\"token\", res.json().token);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// Create a booking\r",
									"const baseURL = pm.environment.get(\"base_url\");\r",
									"const requestURL = baseURL + \"/booking\";\r",
									"\r",
									"const createBooking = {\r",
									"    url: requestURL,\r",
									"    method: 'POST',\r",
									"    header: 'Content-Type:application/json',\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"firstname\": \"Milhouse\",\r",
									"            \"lastname\": \"Van Houten\",\r",
									"            \"totalprice\": 156,\r",
									"            \"depositpaid\": true,\r",
									"            \"bookingdates\": {\r",
									"                \"checkin\": \"2023-12-15\",\r",
									"                \"checkout\": \"2024-01-12\"\r",
									"            },\r",
									"            \"additionalneeds\": \"Mi mamá dice que soy especial.\"\r",
									"        })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(createBooking, function (err, res) {\r",
									"    pm.variables.set(\"bookingId\", res.json().bookingid);\r",
									"    console.log(err ? err : res.json());\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/{{bookingId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"{{bookingId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ping",
			"item": [
				{
					"name": "Ping Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ping is success\", () => {\r",
									"    pm.response.to.be.success;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/ping",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}